---
export const prerender = true;
import Base from '../../layouts/Base.astro';
import Boot from '../../components/Boot.astro';
---

<Base title="Inbolsa · App · Panel">
      <Boot />
  <section class="min-h-dvh px-4 py-10">
    <div class="mx-auto max-w-5xl">
      <div class="flex items-center justify-between gap-4">
        <div>
          <h1 class="text-2xl font-semibold">Panel</h1>
          <p class="text-slate-600 text-sm">Genera QRs y visualiza tu historial.</p>
        </div>
        <button id="logoutBtn" class="rounded-xl border px-4 py-2 hover:bg-slate-50">Cerrar sesión</button>
      </div>

      <div id="gen" class="mt-6 rounded-2xl border bg-white p-6 shadow-sm">
        <div class="mb-3 flex items-center justify-between">
          <h2 class="font-semibold">Generar QR</h2>
          <div class="flex gap-2">
            <button id="btnSelectAll" class="rounded-lg border px-3 py-1 text-sm hover:bg-slate-50">Seleccionar todos</button>
            <button id="btnClear" class="rounded-lg border px-3 py-1 text-sm hover:bg-slate-50">Limpiar</button>
          </div>
        </div>
        <p class="text-sm text-slate-600">
          Selecciona qué productos se mostrarán cuando se desbloquee la landing privada y (opcional) nombra el destinatario.
        </p>

        <div id="productPicker" class="mt-4 grid gap-4 md:grid-cols-2"></div>

        <div class="mt-4 grid gap-3 md:grid-cols-4">
          <input id="recipientName" placeholder="Nombre del destinatario (opcional)"
            class="rounded-xl border px-4 py-3 outline-none focus:ring-2 focus:ring-brand-300" />
          <input id="expiresAt" placeholder="Expira (YYYY-MM-DD HH:MM:SS)"
            class="rounded-xl border px-4 py-3 outline-none focus:ring-2 focus:ring-brand-300" />
          <input id="usageLimit" type="number" min="1" step="1" placeholder="Límite de usos (opcional)"
            class="rounded-xl border px-4 py-3 outline-none focus:ring-2 focus:ring-brand-300" />
          <button id="genBtn"
            class="rounded-xl bg-brand-600 px-4 py-3 font-semibold text-white hover:bg-brand-700 transition">
            Generar QR
          </button>
        </div>
        <div id="genMsg" class="mt-2 text-sm text-slate-600"></div>
      </div>

      <div class="mt-6 rounded-2xl border bg-white p-6 shadow-sm">
        <div class="flex items-center justify-between">
          <h2 class="font-semibold">Mis QRs</h2>
          <div class="text-sm text-slate-600"><span id="listInfo"></span></div>
        </div>

        <div id="list" class="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 items-stretch"></div>

        <div class="mt-4 flex items-center gap-2">
          <button id="prevBtn" class="rounded-xl border px-3 py-2 disabled:opacity-50">Anterior</button>
          <button id="nextBtn" class="rounded-xl border px-3 py-2 disabled:opacity-50">Siguiente</button>
        </div>
      </div>
    </div>
  </section>

  <!-- Modales idénticos a la versión anterior (info y QR) -->
  <div id="infoModal" class="fixed inset-0 z-[60] hidden">
    <div class="absolute inset-0 bg-black/40"></div>
    <div class="absolute inset-0 flex items-center justify-center p-4">
      <div class="w-full max-w-lg rounded-2xl border bg-white p-5 shadow-xl">
        <div class="flex items-center justify-between">
          <h3 class="font-semibold">Información del QR</h3>
          <button id="infoClose" class="rounded-lg border px-3 py-1 text-sm hover:bg-slate-50">Cerrar</button>
        </div>
        <div id="infoBody" class="mt-3 text-sm text-slate-700"></div>
      </div>
    </div>
  </div>

  <div id="qrModal" class="fixed inset-0 z-[70] hidden">
    <div class="absolute inset-0 bg-black/40"></div>
    <div class="absolute inset-0 flex items-center justify-center p-4">
      <div class="w-full max-w-md rounded-2xl border bg-white p-5 shadow-xl">
        <div class="flex items-center justify-between">
          <h3 class="font-semibold">Código QR</h3>
          <button id="qrClose" class="rounded-lg border px-3 py-1 text-sm hover:bg-slate-50">Cerrar</button>
        </div>
        <div class="mt-3 flex flex-col items-center">
          <canvas id="qrCanvas" class="w-[260px] h-[260px]"></canvas>
          <img id="qrImg" class="hidden w-[260px] h-[260px] mt-2" alt="QR" />
          <div id="qrLink" class="mt-3 text-xs text-slate-500 break-all text-center"></div>
          <div class="mt-4 flex gap-2">
            <button id="qrCopy" class="rounded-xl border px-3 py-1 hover:bg-slate-50">Copiar enlace</button>
            <a id="qrDownload" download="qr.png" class="rounded-xl border px-3 py-1 hover:bg-slate-50" href="#">Descargar PNG</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    
    const BASE = (window.__BASE ?? import.meta.env.BASE_URL.replace(/\/$/, ''));
    const API  = (window.__API  ?? (BASE + '/api'));

  async function requireAuth() {
    try {
      const r = await fetch(API + '/auth/me', { credentials: 'include' });
      const d = await r.json().catch(() => ({}));
      if (!r.ok || !d || d.auth !== true) {
        location.href = BASE + '/app/login?next=' + encodeURIComponent(BASE + '/app/panel');
        return false;
      }
      return true;
    } catch {
      location.href = BASE + '/app/login?next=' + encodeURIComponent(BASE + '/app/panel');
      return false;
    }
  }

  await requireAuth();

    /* Catálogo, selección y helpers… (idéntico) */
    const CATALOG = [
      { cat: 'Bolsas', items: [
        { id:'bolsa-chica',   name:'Bolsa chica' },
        { id:'bolsa-grande',  name:'Bolsa grande' },
        { id:'bolsa-enorme',  name:'Bolsa enorme' }
      ]},
      { cat: 'Hilos', items: [
        { id:'hilo-algodon',  name:'Hilo de algodón' },
        { id:'hilo-nylon',    name:'Hilo de nylon' }
      ]}
    ];

    const selected = new Set();
    function renderPicker() {
      const root = document.getElementById('productPicker');
      if (!root) return;
      root.innerHTML = '';
      CATALOG.forEach(group => {
        const box = document.createElement('div');
        box.className = 'rounded-xl border p-3';
        box.innerHTML = `
          <div class="font-medium mb-2">${group.cat}</div>
          <div class="grid gap-2">
            ${group.items.map(p => `
              <label class="flex items-center gap-2">
                <input type="checkbox" value="${p.id}" ${selected.has(p.id) ? 'checked' : ''} class="accent-brand-600">
                <span>${p.name}</span>
                <span class="ml-auto text-xs text-slate-500">${p.id}</span>
              </label>
            `).join('')}
          </div>
        `;
        box.addEventListener('change', (e) => {
          const t = e.target;
          if (!t || t.type !== 'checkbox') return;
          if (t.checked) selected.add(t.value); else selected.delete(t.value);
        });
        root.appendChild(box);
      });
    }
    function selectAll(){ selected.clear(); CATALOG.forEach(g=>g.items.forEach(p=>selected.add(p.id))); renderPicker(); }
    function clearAll(){ selected.clear(); renderPicker(); }
    document.getElementById('btnSelectAll')?.addEventListener('click', e=>{ e.preventDefault(); selectAll(); });
    document.getElementById('btnClear')?.addEventListener('click', e=>{ e.preventDefault(); clearAll(); });

    async function createQR() {
      const msgEl = document.getElementById('genMsg');
      const expiresAt = (document.getElementById('expiresAt')?.value || '').trim();
      const ul = (document.getElementById('usageLimit')?.value || '').trim();
      const recipientName = (document.getElementById('recipientName')?.value || '').trim();

      const allIds = []; CATALOG.forEach(g => g.items.forEach(p => allIds.push(p.id)));
      const isAll = selected.size === allIds.length && allIds.length > 0;

      const payloadObj = isAll
        ? { section:'productos', allow:'all' }
        : { section:'productos', allow:'include', products: Array.from(selected) };
      if (recipientName) payloadObj.label = recipientName;

      const body = {
        type: 'landing-access',
        payload: JSON.stringify(payloadObj),
        expiresAt: expiresAt || undefined,
        usageLimit: ul ? Number(ul) : undefined
      };

      try {
        if (msgEl) msgEl.textContent = 'Creando...';
        const res = await fetch(API + '/qr/create', {
          method:'POST', credentials:'include',
          headers:{ 'Content-Type':'application/json' },
          body: JSON.stringify(body)
        });
        const data = await res.json().catch(()=> ({}));
        if (!res.ok) { if (msgEl) msgEl.textContent = data?.error || 'Error al crear'; return; }
        if (msgEl) msgEl.textContent = 'QR creado';
        const rn = document.getElementById('recipientName');
        if (rn && typeof rn.value === 'string') rn.value = '';
        await loadList();
      } catch {
        if (msgEl) msgEl.textContent = 'No se pudo crear';
      }
    }

    const PRODUCT_LABELS = {
      'bolsa-chica':'Bolsa chica','bolsa-grande':'Bolsa grande','bolsa-enorme':'Bolsa enorme',
      'hilo-algodon':'Hilo de algodón','hilo-nylon':'Hilo de nylon'
    };
    function fmtDate(s){ try{ const d=new Date((s||'').replace(' ','T')+'Z'); return isNaN(d.getTime())?(s||'—'):d.toLocaleString(); }catch{return s||'—';} }
    function esc(t){ const s=String(t??''); return s.replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;').replaceAll('"','&quot;').replaceAll("'",'&#39;'); }
    function coercePayload(p){ if(!p)return{}; if(typeof p==='string'){ try{return JSON.parse(p);}catch{return{};} } return p; }

    let allItems=[]; let page=1; const size=9;
    function setDisabled(id,c){ const el=document.getElementById(id); if(!el)return; c?el.setAttribute('disabled',''):el.removeAttribute('disabled'); }

    function renderPage(){
      const list=document.getElementById('list'); const info=document.getElementById('listInfo');
      if(!list) return;
      list.innerHTML='';
      const start=(page-1)*size, slice=allItems.slice(start,start+size);

      slice.forEach(item=>{
        let displayTitle=item.type||'QR';
        try{ const p=item?.payload?(typeof item.payload==='string'?JSON.parse(item.payload):item.payload):null;
             if(p?.label) displayTitle=p.label; }catch{}

        const card=document.createElement('div');
        card.className='rounded-xl border p-3 hover:shadow transition flex flex-col h-full';

        const badge=item.status==='active'
          ? '<span class="text-green-700 border border-green-200 px-2 py-0.5 rounded-full text-xs">active</span>'
          : '<span class="text-red-700 border border-red-200 px-2 py-0.5 rounded-full text-xs">revoked</span>';

        const openUrl=API + '/qr/open?code=' + encodeURIComponent(item.code);

        card.innerHTML = `
          <div class="flex items-center justify-between gap-2">
            <div class="font-semibold truncate">${esc(displayTitle)}</div>${badge}
          </div>
          <div class="mt-2 text-xs text-slate-500">code:</div>
          <div class="mt-1 rounded border bg-slate-50 px-2 py-1 font-mono text-xs break-all">${esc(item.code)}</div>
          <div class="mt-2 grid grid-cols-2 gap-2 text-xs text-slate-600">
            <div>Usos: <strong>${item.usage_count}${item.usage_limit ? ' / '+item.usage_limit : ''}</strong></div>
            <div>Expira: <strong>${esc(item.expires_at || '-')}</strong></div>
          </div>

          <div class="mt-3 grid grid-cols-2 gap-2">
            <a class="rounded-xl border px-3 py-1 text-center hover:bg-slate-50" target="_blank" href="${openUrl}">Abrir</a>
            ${item.status==='active'
              ? `<button class="rounded-xl border px-3 py-1 hover:bg-red-50" data-revoke="${esc(item.code)}">Revocar</button>`
              : `<button class="rounded-xl border px-3 py-1 opacity-50 cursor-not-allowed" disabled>Revocado</button>`}
            <button class="rounded-xl bg-brand-600 text-white px-3 py-1 hover:bg-brand-700" data-share="${esc(item.code)}">Compartir</button>
            <button class="rounded-xl border px-3 py-1 hover:bg-slate-50" data-qr="${esc(item.code)}">QR</button>
          </div>

          <div class="mt-2">
            <button class="rounded-full border text-xs px-3 py-1" data-info="${esc(item.code)}">Más información</button>
          </div>
        `;
        list.appendChild(card);
      });

      if(info) info.textContent=`Página ${page} · Mostrando ${slice.length} de ${allItems.length}`;
      setDisabled('prevBtn', page<=1); setDisabled('nextBtn', (page*size)>=allItems.length);
    }

    async function loadList(){
      const list=document.getElementById('list');
      try{
        const r=await fetch(API + '/qr/list',{credentials:'include'});
        const d=await r.json();
        allItems=Array.isArray(d?.items)?d.items:[];
        page=1; renderPage();
      } catch{
        if(list) list.innerHTML='<div class="text-slate-600">Error cargando.</div>';
      }
    }

    function openInfoModal(item){
      const infoModal=document.getElementById('infoModal');
      const infoBody=document.getElementById('infoBody');
      if(!infoModal||!infoBody) return;

      const p=coercePayload(item.payload);
      const isAll=p.allow==='all';
      const productos=isAll
        ? '<span class="text-green-700 font-medium">Todos</span>'
        : (Array.isArray(p.products)&&p.products.length
            ? p.products.map(k=>esc(PRODUCT_LABELS[k]||k)).join(', ')
            : '—');

      const quien=esc(item.created_by||'—');
      const creado=fmtDate(item.created_at||'');
      const expira=item.expires_at?fmtDate(item.expires_at):'—';
      const usos=`${item.usage_count}${item.usage_limit?' / '+item.usage_limit:''}`;
      const label=esc(p.label||'');

      infoBody.innerHTML=`
        <div class="space-y-2">
          <div><span class="text-slate-500">Código:</span> <span class="font-mono">${esc(item.code)}</span></div>
          <div><span class="text-slate-500">Destinatario:</span> ${label || '—'}</div>
          <div><span class="text-slate-500">Generado por:</span> ${quien}</div>
          <div><span class="text-slate-500">Creado:</span> ${esc(creado)}</div>
          <div><span class="text-slate-500">Expira:</span> ${esc(expira)}</div>
          <div><span class="text-slate-500">Usos:</span> ${esc(usos)}</div>
          <div><span class="text-slate-500">Productos permitidos:</span> ${productos}</div>
          <div class="pt-2">
            <a class="rounded-xl border px-3 py-1 hover:bg-slate-50" target="_blank"
               href="${API + '/qr/open?code=' + encodeURIComponent(item.code)}">Abrir</a>
          </div>
        </div>
      `;
      infoModal.classList.remove('hidden');
    }
    document.getElementById('infoClose')?.addEventListener('click', ()=> {
      document.getElementById('infoModal')?.classList.add('hidden');
    });
    document.getElementById('infoModal')?.addEventListener('click', (e)=>{
      if (e.target && e.target.id === 'infoModal') {
        document.getElementById('infoModal')?.classList.add('hidden');
      }
    });

    let QR_LIB_PROMISE=null;
    function ensureQRLib(){
      if(QR_LIB_PROMISE) return QR_LIB_PROMISE;
      QR_LIB_PROMISE=new Promise((resolve,reject)=>{
        const s=document.createElement('script');
        s.src='https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js';
        s.async=true;
        s.onload=()=>resolve(window.QRCode);
        s.onerror=()=>reject(new Error('No se pudo cargar la librería QR.'));
        document.head.appendChild(s);
      });
      return QR_LIB_PROMISE;
    }

    async function openQRModal(code){
      const url = location.origin + API + '/qr/open?code=' + encodeURIComponent(code);
      const modal=document.getElementById('qrModal');
      const canvas=document.getElementById('qrCanvas');
      const img=document.getElementById('qrImg');
      const link=document.getElementById('qrLink');
      const dl=document.getElementById('qrDownload');
      if(!modal||!canvas||!img||!link||!dl) return;

      link.textContent=url;
      img.classList.add('hidden'); canvas.classList.remove('hidden');

      try{
        const QRCode=await ensureQRLib();
        const ctx=canvas.getContext('2d'); ctx.clearRect(0,0,canvas.width,canvas.height);
        canvas.width=260; canvas.height=260;
        await QRCode.toCanvas(canvas,url,{width:260,margin:1});
        dl.href=canvas.toDataURL('image/png');
      }catch{
        const apiUrl='https://api.qrserver.com/v1/create-qr-code/?size=260x260&data='+encodeURIComponent(url);
        img.src=apiUrl; img.onload=()=>{ try{ const c2=document.createElement('canvas'); c2.width=260; c2.height=260;
          const ct=c2.getContext('2d'); ct.drawImage(img,0,0,260,260); dl.href=c2.toDataURL('image/png'); }catch{ dl.href=apiUrl; } };
        img.classList.remove('hidden'); canvas.classList.add('hidden');
      }
      modal.classList.remove('hidden');
      document.getElementById('qrCopy')?.addEventListener('click', async ()=>{
        try{ await navigator.clipboard.writeText(url); alert('Enlace copiado'); }
        catch{ prompt('Copia este enlace:', url); }
      },{once:true});
    }

    if (await requireAuth()) {
      renderPicker();

      document.getElementById('genBtn')?.addEventListener('click', e=>{ e.preventDefault(); createQR(); });
      document.getElementById('prevBtn')?.addEventListener('click', ()=>{ if(page>1){page--;renderPage();} });
      document.getElementById('nextBtn')?.addEventListener('click', ()=>{ if((page*size)<allItems.length){page++;renderPage();} });

      document.addEventListener('click', async (e)=>{
        const t=e.target; if(!t||!t.getAttribute) return;

        const code=t.getAttribute('data-revoke');
        if(code){
          e.preventDefault();
          if(!confirm('¿Revocar este QR?\n'+code)) return;
          try{
            const r=await fetch(API + '/qr/revoke',{
              method:'POST',credentials:'include',
              headers:{'Content-Type':'application/json'},
              body:JSON.stringify({code})
            });
            if(!r.ok){alert('Error al revocar');return;}
            await loadList();
          }catch{ alert('Error al revocar'); }
          return;
        }

        const shareCode=t.getAttribute('data-share');
        if(shareCode){
          e.preventDefault();
          const url = location.origin + API + '/qr/open?code=' + encodeURIComponent(shareCode);
          const msg = 'Escanea este QR para acceder a la landing privada.';
          const wa='https://wa.me/?text='+encodeURIComponent(msg+' '+url);
          try{
            if(navigator.share && ((navigator.canShare && navigator.canShare({url})) || !navigator.canShare)){
              await navigator.share({title:'QR Inbolsa',text:msg,url}); return;
            }
          }catch{}
          window.open(wa,'_blank','noopener,noreferrer');
          try{ await navigator.clipboard.writeText(url); }catch{ prompt('Copia este enlace:', url); }
          return;
        }

        const infoCode=t.getAttribute('data-info');
        if(infoCode){ e.preventDefault(); const it=allItems.find(i=>i.code===infoCode); if(it) openInfoModal(it); return; }

        const qrCode=t.getAttribute('data-qr');
        if(qrCode){ e.preventDefault(); openQRModal(qrCode); return; }
      });

      document.getElementById('logoutBtn')?.addEventListener('click', async ()=>{
        try{ await fetch(API + '/auth/logout',{method:'POST',credentials:'include'});}catch{}
        location.href = BASE + '/app/login';
      });

      await loadList();
    }
  </script>
</Base>
